{"version":3,"sources":["components/Ibox/index.tsx","components/GeneralTable/TCell/index.tsx","components/GeneralTable/TRow/index.tsx","components/GeneralTable/THCell/index.tsx","components/GeneralTable/THRow/index.tsx","components/GeneralTable/index.tsx","containers/DashBoard/index.tsx"],"names":["customStyle","small","paddingLeft","Ibox","props","title","label","children","isClose","subTitle","useState","isOpen","setIsOpen","collapse","setCollapse","IconCollapse","className","onClick","style","Collapse","in","defaultProps","TCell","FormatterComponent","content","formatter","Formatter","row","TRow","onClickAction","reRender","THCells","map","THCell","key","a","sortable","changeLabelSort","directionDesc","labelSort","icon","faSort","faSortUp","faSortDown","THRow","columns","generateTHRows","currentTHCell","isSorting","GeneralTable","rows","body","Dashboard","languages","setLanguages","units","setUnits","getLanguages","LanguageService","getAll","totalUserLanguage","useMemo","reduce","prev","cur","users","length","getUnits","UnitService","totalUserUnit","useEffect","ratios","language","name","userRatio","toFixed","count","width","renderLanguageRatio","unit","renderUnitRatio"],"mappings":"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","file":"static/js/3.395303de.chunk.js","sourcesContent":["import React, {useMemo, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Collapse} from '@material-ui/core';\r\nimport {Transition} from 'react-transition-group';\r\nimport * as CSS from 'csstype';\r\n\r\nconst customStyle = {\r\n    small: {\r\n        paddingLeft: '8px',\r\n    }\r\n};\r\n\r\ninterface IboxInterface {\r\n    title: string,\r\n    label?: string | JSX.Element,\r\n    style?: CSS.Properties,\r\n    isClose?: boolean,\r\n    children: JSX.Element | JSX.Element[],\r\n    subTitle?: string | JSX.Element,\r\n}\r\n\r\nconst Ibox: React.FC<IboxInterface> = (props) => {\r\n    const {\r\n        title, label, children, isClose, subTitle,\r\n    } = props;\r\n\r\n    const [isOpen, setIsOpen] = useState(true);\r\n    const [collapse, setCollapse] = useState(true);\r\n\r\n    const onClickCollapse = () => {\r\n        setCollapse(!collapse);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const IconCollapse = (\r\n            <a className=\"collapse-link\" onClick={onClickCollapse}>\r\n                <i className={`fa ${collapse ? 'fa-chevron-down' : ' fa-chevron-up'}`} />\r\n            </a>\r\n        );\r\n\r\n    return (\r\n        <>\r\n            {isOpen\r\n                && (\r\n                    <div className=\"wrapper wrapper-content animated fadeInRight\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12\">\r\n                                <div className=\"ibox float-e-margins\">\r\n                                    <div className=\"ibox-title\">\r\n                                        <div>\r\n                                            <h5>\r\n                                                {title}\r\n                                                <small style={customStyle.small}>\r\n                                                    {subTitle}\r\n                                                </small>\r\n                                            </h5>\r\n                                        </div>\r\n\r\n                                        {label}\r\n                                        <div className=\"ibox-tools\">\r\n                                            {IconCollapse}\r\n\r\n                                            {isClose && (\r\n                                                <a className=\"close-link\" onClick={onClose}>\r\n                                                    <i className=\"fa fa-times\" />\r\n                                                </a>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <Collapse in={collapse}>\r\n                                        <div className=\"ibox-content\">\r\n                                            {children}\r\n                                        </div>\r\n                                    </Collapse>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n        </>\r\n    );\r\n};\r\n\r\nIbox.defaultProps = {\r\n    label: '',\r\n    isClose: false,\r\n    children: <></>,\r\n};\r\n\r\n\r\nexport default Ibox;\r\n","import React, {Component, Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.scss';\r\nimport {FormatterProps} from '../THCell';\r\nimport * as CSS from 'csstype';\r\n\r\nexport declare interface TCellInterFace<TRow> {\r\n    key: string,\r\n    row: TRow[],\r\n    content?: any,\r\n    className?: string,\r\n    style?: CSS.Properties,\r\n    formatter?: React.ComponentType<FormatterProps<TRow>>,\r\n}\r\n\r\nfunction ValueFormatter(props) {\r\n    return <>\r\n        {props.row[props.column.key]}\r\n    </>\r\n}\r\n\r\nexport const TCell: React.FC<TCellInterFace<any>> = (props) => {\r\n\r\n    const {content, className, style, formatter, row} = props;\r\n\r\n\r\n    const Formatter = formatter;\r\n\r\n\r\n    let FormatterComponent;\r\n\r\n    if (Formatter) {\r\n        FormatterComponent = <Formatter {...props} />;\r\n    }\r\n    return (\r\n        <>\r\n            <td className={className} style={style}>\r\n                {formatter ?\r\n                    FormatterComponent : content}\r\n            </td>\r\n        </>\r\n    );\r\n}\r\n","import React, {Component, isValidElement, cloneElement, MouseEventHandler} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as CSS from 'csstype';\r\nimport './index.scss';\r\nimport THCell, {THCellInterface} from '../THCell';\r\nimport {TCellInterFace, TCell} from '../TCell';\r\nimport {THRowInterface} from '../THRow';\r\nimport {FormatterProps} from 'react-data-grid';\r\n\r\n\r\ntype Direction = 'DESC' | 'ASC';\r\n\r\n\r\ninterface TRowInterface<R> {\r\n    row: R[],\r\n    THCells: THCellInterface<R>[],\r\n    className?: string,\r\n    onClickAction?: any,\r\n    reRender?: (content) => JSX.Element[],\r\n    style?: CSS.Properties,\r\n}\r\n\r\nconst defaultProps: TRowInterface<any> = {\r\n    row: [],\r\n    THCells: [],\r\n}\r\nconst formaterELM = (props: FormatterProps<any>) => {\r\n    return <>\r\n        <div></div>\r\n    </>\r\n}\r\nconst TRow: React.FC<TRowInterface<any>> = (props) => {\r\n    const {style, className, onClickAction, reRender, row, THCells} = props;\r\n\r\n    return (\r\n        <>\r\n            <tr className={className} style={style} >\r\n                {THCells.map((THCell) => {\r\n                    return <TCell key={THCell.key} formatter={THCell.formatter} row={row} content={row[THCell.key]} />\r\n                })}\r\n\r\n            </tr>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nTRow.defaultProps = defaultProps;\r\n\r\nexport default TRow;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport * as CSS from 'csstype';\r\nimport {\r\n    faSort,\r\n    faSortDown,\r\n    faSortUp,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './index.scss';\r\n\r\nexport interface THCellInterface<TRow> {\r\n    content: JSX.Element | string,\r\n    key: string,\r\n    className?: string,\r\n    style?: CSS.Properties,\r\n    width?: number | string,\r\n    changeLabelSort?: (label) => void,\r\n    directionDesc?: boolean,\r\n\r\n    formatter?: React.ComponentType<FormatterProps<TRow>>;\r\n    isSorting?: boolean,\r\n    sortable?: boolean\r\n}\r\n\r\n\r\nexport declare interface FormatterProps<TRow> {\r\n    column?: THCellInterface<TRow>;\r\n    row: TRow;\r\n}\r\n\r\nexport const THCell: React.FC<THCellInterface<any>> = (props) => {\r\n\r\n    const onClick = async (key) => {\r\n        const {sortable, changeLabelSort} = props;\r\n        if (sortable === false) {\r\n            return;\r\n        }\r\n        // await changeLabelSort(key);\r\n    };\r\n\r\n    const {content, className, sortable, key, directionDesc, style, formatter} = props;\r\n    let labelSort: JSX.Element | null = null;\r\n    if (sortable !== false) {\r\n        let icon = faSort;\r\n\r\n        if (directionDesc === true) {\r\n            icon = faSortUp;\r\n        }\r\n        if (directionDesc === false) {\r\n            icon = faSortDown;\r\n        }\r\n        labelSort = (\r\n            <>\r\n                <FontAwesomeIcon icon={icon} className=\"footable-sort-indicator\" />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <th\r\n                className={`footable-sortable sorting ${className} thead-sorting`}\r\n                style={style}\r\n                onClick={() => onClick(key)}\r\n            >\r\n                {content}\r\n                {labelSort}\r\n            </th>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default THCell;\r\n","import React, {Component, isValidElement, cloneElement} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.scss';\r\nimport {THCellInterface, THCell} from '../THCell';\r\nimport * as CSS from 'csstype';\r\n\r\nexport interface THRowInterface<R> {\r\n    columns: THCellInterface<R>[],\r\n    className?: string,\r\n    changeLabelSort?: (key) => void,\r\n    directionDesc?: boolean,\r\n    labelSort?: string,\r\n    style?: CSS.Properties,\r\n}\r\n\r\nconst defaultProps: THRowInterface<any> = {\r\n    columns: [],\r\n};\r\n\r\nexport const THRow: React.FC<THRowInterface<any>> = (props) => {\r\n    const {\r\n        columns,\r\n        className,\r\n        labelSort,\r\n        changeLabelSort,\r\n        directionDesc,\r\n        style,\r\n    } = props;\r\n\r\n    const generateTHRows = columns.map((currentTHCell) => {\r\n        if (currentTHCell.key === labelSort) {\r\n            return (\r\n                <THCell {...currentTHCell} isSorting directionDesc={directionDesc} />\r\n            )\r\n\r\n        }\r\n        return (<THCell {...currentTHCell} />)\r\n    }\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <tr className={className} style={style}>\r\n                {generateTHRows}\r\n            </tr>\r\n        </>\r\n    );\r\n}\r\n\r\nTHRow.defaultProps = defaultProps;\r\n\r\n","import React, {Component, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom';\r\nimport './index.scss';\r\n\r\nimport TRow from './TRow';\r\n\r\nimport {THRow, THRowInterface} from './THRow';\r\nimport {THCell, THCellInterface} from './THCell';\r\nimport * as CSS from 'csstype';\r\n\r\nexport * from './THRow';\r\nexport * from './THCell';\r\n\r\nexport interface GeneralTablePropsInterface<R> {\r\n    columns: THCellInterface<R>[];\r\n    rows: R[],\r\n    className?: string,\r\n    style?: CSS.Properties,\r\n    onClickAction?: (row: R) => void,\r\n    labelSort?: string,\r\n    directionDesc?: boolean,\r\n}\r\n\r\nexport interface GeneralTableStateInterface<R> {\r\n    currentLabelSort: string,\r\n    directionDesc: boolean,\r\n    rows: R[],\r\n}\r\n\r\nconst compareValues = (key, order = 'asc') => (a, b) => {\r\n    if (\r\n        !Object.prototype.hasOwnProperty.call(a, key) ||\r\n        !Object.prototype.hasOwnProperty.call(b, key)\r\n    ) {\r\n        return 0;\r\n    }\r\n\r\n    if (a[key] === null || a[key] === undefined) {\r\n        a[key] = '';\r\n    }\r\n\r\n    if (b[key] === null || b[key] === undefined) {\r\n        b[key] = '';\r\n    }\r\n\r\n    const varA = typeof a[key] === 'string' ? a[key].toUpperCase() : a[key];\r\n    const varB = typeof b[key] === 'string' ? b[key].toUpperCase() : b[key];\r\n\r\n    let comparison = 0;\r\n\r\n    if (varA > varB) {\r\n        comparison = 1;\r\n    } else if (varA < varB) {\r\n        comparison = -1;\r\n    }\r\n\r\n    return order === 'desc' ? comparison * -1 : comparison;\r\n};\r\n\r\nexport const GeneralTable: React.FC<GeneralTablePropsInterface<any>> = (props) => {\r\n\r\n    const [labelSortState, setLabelSortState] = useState<string | null>();\r\n    const [directionDescState, SetDirectionDescState] = useState<boolean>(false);\r\n\r\n    const {\r\n        columns,\r\n        rows,\r\n        className,\r\n        style,\r\n        onClickAction,\r\n        labelSort,\r\n        directionDesc,\r\n    } = props;\r\n\r\n    let tHeadLabel;\r\n\r\n    const body = rows.map((row) => {\r\n        return <TRow row={row} THCells={columns} onClickAction={onClickAction} />\r\n    });\r\n    return (\r\n        <>\r\n            <div style={style} className={className}>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-stripped table-custom\">\r\n                        <thead >\r\n                            <THRow columns={columns} directionDesc labelSort={labelSort} />\r\n                        </thead>\r\n\r\n                        <tbody>\r\n                            {body}\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default GeneralTable;\r\n","import React, { Component, useEffect, useState, useRef, useCallback, useMemo } from 'react';\r\n\r\n\r\nimport { toastr } from 'react-redux-toastr';\r\nimport { filter } from 'lodash';\r\nimport Ibox from '@components/Ibox';\r\nimport IboxHorisontal from '@components/iboxHorisontal/index';\r\nimport { GeneralTable, THRowInterface, THCellInterface } from '@components/GeneralTable';\r\n\r\nimport { UnitService, LanguageService } from '@services';\r\n\r\nconst getColumns = (): THCellInterface<any>[] => {\r\n\r\n    return [{\r\n        key: 'name',\r\n        content: 'Ngôn ngữ',\r\n        width: 100\r\n    },\r\n    {\r\n        key: 'count',\r\n        content: 'Số nhân viên',\r\n    },\r\n    {\r\n        key: 'userRatio',\r\n        content: 'Tỉ lệ',\r\n        formatter: ({ row }) => {\r\n            return <>{row.userRatio} %</>\r\n        }\r\n    },\r\n\r\n    ];\r\n}\r\n\r\nconst getColumnsUnit = (): THCellInterface<any>[] => {\r\n\r\n    return [{\r\n        key: 'name',\r\n        content: 'Đơn vị',\r\n        width: 100\r\n    },\r\n    {\r\n        key: 'count',\r\n        content: 'Số nhân viên',\r\n    },\r\n    {\r\n        key: 'userRatio',\r\n        content: 'Tỉ lệ',\r\n        formatter: ({ row }) => {\r\n            return <>{row.userRatio} %</>\r\n        }\r\n    },\r\n\r\n    ];\r\n}\r\nconst Dashboard = () => {\r\n    const [languages, setLanguages] = useState<any>([]);\r\n    const [units, setUnits] = useState<any>([]);\r\n\r\n    const getLanguages = async () => {\r\n        try {\r\n            const languages = await LanguageService.getAll();\r\n            setLanguages(languages.languages)\r\n        } catch {\r\n        }\r\n    }\r\n    const totalUserLanguage = useMemo(() => {\r\n        return languages && languages.reduce((prev, cur) => {\r\n            return prev + cur.users.length;\r\n        }, 0);\r\n    }, [languages]);\r\n\r\n    const getUnits = async () => {\r\n        try {\r\n            const units = await UnitService.getAll();\r\n            setUnits(units.units)\r\n        } catch {\r\n        }\r\n    }\r\n\r\n    const totalUserUnit = useMemo(() => {\r\n        return units && units.reduce((prev, cur) => {\r\n            return prev + cur.users.length;\r\n        }, 0);\r\n    }, [units]);\r\n\r\n    useEffect(() => {\r\n        getLanguages();\r\n        getUnits();\r\n    }, []);\r\n\r\n    const renderLanguageRatio = () => {\r\n        const ratios = languages.map((language: any) => {\r\n            const { users } = language;\r\n            return {\r\n                name: language.name,\r\n                userRatio: (users.length / totalUserLanguage * 100).toFixed(2),\r\n                count: users.length\r\n            }\r\n        })\r\n        return <GeneralTable columns={getColumns()} rows={ratios} directionDesc />\r\n\r\n    }\r\n\r\n    const renderUnitRatio = () => {\r\n        const ratios = units.map((unit: any) => {\r\n            const { users } = unit;\r\n            return {\r\n                name: unit.name,\r\n                userRatio: (users.length / totalUserUnit * 100).toFixed(2),\r\n                count: users.length\r\n            }\r\n        });\r\n\r\n        return <GeneralTable columns={getColumnsUnit()} rows={ratios} directionDesc />\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex\">\r\n\r\n                <div className=\" flex-grow-1\"  >\r\n                    <Ibox title=\"Ngôn ngữ\"\r\n\r\n                        subTitle={<small>Ngôn ngữ</small>}\r\n                    >\r\n                        <div >\r\n                            {\r\n                                renderLanguageRatio()\r\n                            }\r\n                        </div>\r\n\r\n                    </Ibox>\r\n                </div>\r\n\r\n                <div className=\" flex-grow-1\"  >\r\n                    <Ibox title=\"Đơn vị\"\r\n\r\n                        subTitle={<small>Đơn vị</small>}\r\n                        isClose={false}>\r\n                        <div >\r\n                            {\r\n                                renderUnitRatio()\r\n                            }\r\n                        </div>\r\n\r\n                    </Ibox>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}